# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import grpcd.sensor_pb2 as sensor__pb2


class InnerSensorStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.UploadProbeTrafficLog = channel.unary_unary(
                '/grpc_server.InnerSensor/UploadProbeTrafficLog',
                request_serializer=sensor__pb2.ProbeTrafficLog.SerializeToString,
                response_deserializer=sensor__pb2.Response.FromString,
                )
        self.FetchTask = channel.unary_unary(
                '/grpc_server.InnerSensor/FetchTask',
                request_serializer=sensor__pb2.Flag.SerializeToString,
                response_deserializer=sensor__pb2.Task.FromString,
                )
        self.UploadTaskStatus = channel.unary_unary(
                '/grpc_server.InnerSensor/UploadTaskStatus',
                request_serializer=sensor__pb2.TaskStatus.SerializeToString,
                response_deserializer=sensor__pb2.Response.FromString,
                )
        self.UploadProbeInfo = channel.unary_unary(
                '/grpc_server.InnerSensor/UploadProbeInfo',
                request_serializer=sensor__pb2.ProbeInfo.SerializeToString,
                response_deserializer=sensor__pb2.Response.FromString,
                )


class InnerSensorServicer(object):
    """Missing associated documentation comment in .proto file."""

    def UploadProbeTrafficLog(self, request, context):
        """上传主机探针流量
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FetchTask(self, request, context):
        """获取任务
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UploadTaskStatus(self, request, context):
        """反馈任务执行结果
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UploadProbeInfo(self, request, context):
        """上传探针的信息
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_InnerSensorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'UploadProbeTrafficLog': grpc.unary_unary_rpc_method_handler(
                    servicer.UploadProbeTrafficLog,
                    request_deserializer=sensor__pb2.ProbeTrafficLog.FromString,
                    response_serializer=sensor__pb2.Response.SerializeToString,
            ),
            'FetchTask': grpc.unary_unary_rpc_method_handler(
                    servicer.FetchTask,
                    request_deserializer=sensor__pb2.Flag.FromString,
                    response_serializer=sensor__pb2.Task.SerializeToString,
            ),
            'UploadTaskStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.UploadTaskStatus,
                    request_deserializer=sensor__pb2.TaskStatus.FromString,
                    response_serializer=sensor__pb2.Response.SerializeToString,
            ),
            'UploadProbeInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.UploadProbeInfo,
                    request_deserializer=sensor__pb2.ProbeInfo.FromString,
                    response_serializer=sensor__pb2.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'grpc_server.InnerSensor', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class InnerSensor(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def UploadProbeTrafficLog(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_server.InnerSensor/UploadProbeTrafficLog',
            sensor__pb2.ProbeTrafficLog.SerializeToString,
            sensor__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FetchTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_server.InnerSensor/FetchTask',
            sensor__pb2.Flag.SerializeToString,
            sensor__pb2.Task.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UploadTaskStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_server.InnerSensor/UploadTaskStatus',
            sensor__pb2.TaskStatus.SerializeToString,
            sensor__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UploadProbeInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_server.InnerSensor/UploadProbeInfo',
            sensor__pb2.ProbeInfo.SerializeToString,
            sensor__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
